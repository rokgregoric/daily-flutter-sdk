// ignore_for_file: non_constant_identifier_names, constant_identifier_names
//
// Code generated by ffigen, do not modify.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class DailyNativeGen {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DailyNativeGen(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DailyNativeGen.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  DailyCallClientFns daily_core_call_client_fns() {
    return _daily_core_call_client_fns();
  }

  late final _daily_core_call_client_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientFns Function()>>(
          'daily_core_call_client_fns');
  late final _daily_core_call_client_fns = _daily_core_call_client_fnsPtr
      .asFunction<DailyCallClientFns Function()>();

  DailyCallClientAppMessageFns daily_core_call_client_app_message_fns() {
    return _daily_core_call_client_app_message_fns();
  }

  late final _daily_core_call_client_app_message_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientAppMessageFns Function()>>(
          'daily_core_call_client_app_message_fns');
  late final _daily_core_call_client_app_message_fns =
      _daily_core_call_client_app_message_fnsPtr
          .asFunction<DailyCallClientAppMessageFns Function()>();

  /// Send a custom app message
  void daily_core_call_client_send_app_message(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> participant,
  ) {
    return _daily_core_call_client_send_app_message(
      client,
      request_id,
      message,
      participant,
    );
  }

  late final _daily_core_call_client_send_app_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_send_app_message');
  late final _daily_core_call_client_send_app_message =
      _daily_core_call_client_send_app_messagePtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Send a prebuilt chat message
  void daily_core_call_client_send_prebuilt_chat_message(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> room,
  ) {
    return _daily_core_call_client_send_prebuilt_chat_message(
      client,
      request_id,
      message,
      name,
      room,
    );
  }

  late final _daily_core_call_client_send_prebuilt_chat_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<DailyRawCallClient>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_send_prebuilt_chat_message');
  late final _daily_core_call_client_send_prebuilt_chat_message =
      _daily_core_call_client_send_prebuilt_chat_messagePtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  DailyCallClientAudioLevelFns daily_core_call_client_audio_level_fns() {
    return _daily_core_call_client_audio_level_fns();
  }

  late final _daily_core_call_client_audio_level_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientAudioLevelFns Function()>>(
          'daily_core_call_client_audio_level_fns');
  late final _daily_core_call_client_audio_level_fns =
      _daily_core_call_client_audio_level_fnsPtr
          .asFunction<DailyCallClientAudioLevelFns Function()>();

  void daily_core_call_client_start_remote_participants_audio_level_observer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    int interval,
  ) {
    return _daily_core_call_client_start_remote_participants_audio_level_observer(
      client,
      request_id,
      interval,
    );
  }

  late final _daily_core_call_client_start_remote_participants_audio_level_observerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                      ffi.Uint64)>>(
          'daily_core_call_client_start_remote_participants_audio_level_observer');
  late final _daily_core_call_client_start_remote_participants_audio_level_observer =
      _daily_core_call_client_start_remote_participants_audio_level_observerPtr
          .asFunction<
              void Function(ffi.Pointer<DailyRawCallClient>, int, int)>();

  void daily_core_call_client_stop_remote_participants_audio_level_observer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
  ) {
    return _daily_core_call_client_stop_remote_participants_audio_level_observer(
      client,
      request_id,
    );
  }

  late final _daily_core_call_client_stop_remote_participants_audio_level_observerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<DailyRawCallClient>, ffi.Uint64)>>(
          'daily_core_call_client_stop_remote_participants_audio_level_observer');
  late final _daily_core_call_client_stop_remote_participants_audio_level_observer =
      _daily_core_call_client_stop_remote_participants_audio_level_observerPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>, int)>();

  void daily_core_call_client_start_local_audio_level_observer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    int interval,
  ) {
    return _daily_core_call_client_start_local_audio_level_observer(
      client,
      request_id,
      interval,
    );
  }

  late final _daily_core_call_client_start_local_audio_level_observerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                      ffi.Uint64)>>(
          'daily_core_call_client_start_local_audio_level_observer');
  late final _daily_core_call_client_start_local_audio_level_observer =
      _daily_core_call_client_start_local_audio_level_observerPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int, int)>();

  void daily_core_call_client_stop_local_audio_level_observer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
  ) {
    return _daily_core_call_client_stop_local_audio_level_observer(
      client,
      request_id,
    );
  }

  late final _daily_core_call_client_stop_local_audio_level_observerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<DailyRawCallClient>, ffi.Uint64)>>(
          'daily_core_call_client_stop_local_audio_level_observer');
  late final _daily_core_call_client_stop_local_audio_level_observer =
      _daily_core_call_client_stop_local_audio_level_observerPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>, int)>();

  DailyCallClientCallStateFns daily_core_call_client_call_state_fns() {
    return _daily_core_call_client_call_state_fns();
  }

  late final _daily_core_call_client_call_state_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientCallStateFns Function()>>(
          'daily_core_call_client_call_state_fns');
  late final _daily_core_call_client_call_state_fns =
      _daily_core_call_client_call_state_fnsPtr
          .asFunction<DailyCallClientCallStateFns Function()>();

  /// Obtain the current call state
  int daily_core_call_client_call_state(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_call_state(
      client,
    );
  }

  late final _daily_core_call_client_call_statePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_call_state');
  late final _daily_core_call_client_call_state =
      _daily_core_call_client_call_statePtr
          .asFunction<int Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Retrieve the call config for a given URL and optional token
  void daily_core_call_client_call_config_for(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> url,
    ffi.Pointer<ffi.Char> token,
  ) {
    return _daily_core_call_client_call_config_for(
      client,
      request_id,
      url,
      token,
    );
  }

  late final _daily_core_call_client_call_config_forPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_call_config_for');
  late final _daily_core_call_client_call_config_for =
      _daily_core_call_client_call_config_forPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  DailyCallClientConnectionFns daily_core_call_client_connection_fns() {
    return _daily_core_call_client_connection_fns();
  }

  late final _daily_core_call_client_connection_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientConnectionFns Function()>>(
          'daily_core_call_client_connection_fns');
  late final _daily_core_call_client_connection_fns =
      _daily_core_call_client_connection_fnsPtr
          .asFunction<DailyCallClientConnectionFns Function()>();

  /// Connects to a call with the given URL and client settings.
  /// This function can fail if the URL or settings are not valid, and
  /// blocks until the call is joined, or is failed to be joined.
  /// If this call fails (due to invalid settings, or other reasons), it
  /// will return a null pointer.
  /// # Safety
  /// Calling this function with a null URL parameter will result in a crash.
  void daily_core_call_client_join(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> url,
    ffi.Pointer<ffi.Char> token,
    ffi.Pointer<ffi.Char> client_settings,
  ) {
    return _daily_core_call_client_join(
      client,
      request_id,
      url,
      token,
      client_settings,
    );
  }

  late final _daily_core_call_client_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient>,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('daily_core_call_client_join');
  late final _daily_core_call_client_join =
      _daily_core_call_client_joinPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// Leave the current Daily call
  /// # Safety
  /// Will result in a crash if called prior to a [daily_core_context_create] or after [daily_core_context_destroy]
  void daily_core_call_client_leave(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
  ) {
    return _daily_core_call_client_leave(
      client,
      request_id,
    );
  }

  late final _daily_core_call_client_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>,
              ffi.Uint64)>>('daily_core_call_client_leave');
  late final _daily_core_call_client_leave = _daily_core_call_client_leavePtr
      .asFunction<void Function(ffi.Pointer<DailyRawCallClient>, int)>();

  DailyCallClientDevicesFns daily_core_call_client_devices_fns() {
    return _daily_core_call_client_devices_fns();
  }

  late final _daily_core_call_client_devices_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientDevicesFns Function()>>(
          'daily_core_call_client_devices_fns');
  late final _daily_core_call_client_devices_fns =
      _daily_core_call_client_devices_fnsPtr
          .asFunction<DailyCallClientDevicesFns Function()>();

  /// Obtain the media devices available to the call client
  /// # Safety
  /// Will crash if called prior to a [daily_core_context_create] or after [daily_core_context_destroy]
  ffi.Pointer<ffi.Char> daily_core_call_client_available_devices(
    ffi.Pointer<DailyRawCallClient> client,
    ffi.Pointer<ffi.Char> config,
  ) {
    return _daily_core_call_client_available_devices(
      client,
      config,
    );
  }

  late final _daily_core_call_client_available_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<DailyRawCallClient>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_available_devices');
  late final _daily_core_call_client_available_devices =
      _daily_core_call_client_available_devicesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient>, ffi.Pointer<ffi.Char>)>();

  void daily_core_call_client_trigger_devices_changed(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_trigger_devices_changed(
      client,
    );
  }

  late final _daily_core_call_client_trigger_devices_changedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_trigger_devices_changed');
  late final _daily_core_call_client_trigger_devices_changed =
      _daily_core_call_client_trigger_devices_changedPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>)>();

  NativeCallClientDialoutFns daily_core_call_client_dialout_fns() {
    return _daily_core_call_client_dialout_fns();
  }

  late final _daily_core_call_client_dialout_fnsPtr =
      _lookup<ffi.NativeFunction<NativeCallClientDialoutFns Function()>>(
          'daily_core_call_client_dialout_fns');
  late final _daily_core_call_client_dialout_fns =
      _daily_core_call_client_dialout_fnsPtr
          .asFunction<NativeCallClientDialoutFns Function()>();

  /// Start a dialout
  void daily_core_call_client_start_dialout(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _daily_core_call_client_start_dialout(
      client,
      request_id,
      properties,
    );
  }

  late final _daily_core_call_client_start_dialoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('daily_core_call_client_start_dialout');
  late final _daily_core_call_client_start_dialout =
      _daily_core_call_client_start_dialoutPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Stop a dialout
  void daily_core_call_client_stop_dialout(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
  ) {
    return _daily_core_call_client_stop_dialout(
      client,
      request_id,
    );
  }

  late final _daily_core_call_client_stop_dialoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>,
              ffi.Uint64)>>('daily_core_call_client_stop_dialout');
  late final _daily_core_call_client_stop_dialout =
      _daily_core_call_client_stop_dialoutPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>, int)>();

  DailyCallClientInputsFns daily_core_call_client_inputs_fns() {
    return _daily_core_call_client_inputs_fns();
  }

  late final _daily_core_call_client_inputs_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientInputsFns Function()>>(
          'daily_core_call_client_inputs_fns');
  late final _daily_core_call_client_inputs_fns =
      _daily_core_call_client_inputs_fnsPtr
          .asFunction<DailyCallClientInputsFns Function()>();

  /// Obtain the currently desired input settings
  /// # Safety
  /// Will crash if the `query_config` parameter is not a valid pointer
  /// to a `const char *` (or `nullptr`)
  ffi.Pointer<ffi.Char> daily_core_call_client_inputs(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_inputs(
      client,
    );
  }

  late final _daily_core_call_client_inputsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_inputs');
  late final _daily_core_call_client_inputs =
      _daily_core_call_client_inputsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Update the desired input settings for this call
  /// # Safety
  /// Will crash if the `input_settings` parameter is not a valid pointer
  /// to a `const char *`.
  void daily_core_call_client_update_inputs(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> input_settings,
  ) {
    return _daily_core_call_client_update_inputs(
      client,
      request_id,
      input_settings,
    );
  }

  late final _daily_core_call_client_update_inputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('daily_core_call_client_update_inputs');
  late final _daily_core_call_client_update_inputs =
      _daily_core_call_client_update_inputsPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Adds a custom video track
  void daily_core_call_client_add_custom_video_track(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> track_ptr,
  ) {
    return _daily_core_call_client_add_custom_video_track(
      client,
      request_id,
      name,
      track_ptr,
    );
  }

  late final _daily_core_call_client_add_custom_video_trackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'daily_core_call_client_add_custom_video_track');
  late final _daily_core_call_client_add_custom_video_track =
      _daily_core_call_client_add_custom_video_trackPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// Updates a custom video track
  void daily_core_call_client_update_custom_video_track(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> track_ptr,
  ) {
    return _daily_core_call_client_update_custom_video_track(
      client,
      request_id,
      name,
      track_ptr,
    );
  }

  late final _daily_core_call_client_update_custom_video_trackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'daily_core_call_client_update_custom_video_track');
  late final _daily_core_call_client_update_custom_video_track =
      _daily_core_call_client_update_custom_video_trackPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// Removes a custom video track
  void daily_core_call_client_remove_custom_video_track(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _daily_core_call_client_remove_custom_video_track(
      client,
      request_id,
      name,
    );
  }

  late final _daily_core_call_client_remove_custom_video_trackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_remove_custom_video_track');
  late final _daily_core_call_client_remove_custom_video_track =
      _daily_core_call_client_remove_custom_video_trackPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  DailyCallClientLifecycleFns daily_core_call_client_lifecycle_fns() {
    return _daily_core_call_client_lifecycle_fns();
  }

  late final _daily_core_call_client_lifecycle_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientLifecycleFns Function()>>(
          'daily_core_call_client_lifecycle_fns');
  late final _daily_core_call_client_lifecycle_fns =
      _daily_core_call_client_lifecycle_fnsPtr
          .asFunction<DailyCallClientLifecycleFns Function()>();

  /// Create a new instance of a Daily call client.
  /// # Safety
  /// Invoking this call prior to [daily_core_context_create] or after [daily_core_context_destroy] will result in a crash
  ffi.Pointer<DailyRawCallClient> daily_core_call_client_create() {
    return _daily_core_call_client_create();
  }

  late final _daily_core_call_client_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DailyRawCallClient> Function()>>(
          'daily_core_call_client_create');
  late final _daily_core_call_client_create = _daily_core_call_client_createPtr
      .asFunction<ffi.Pointer<DailyRawCallClient> Function()>();

  /// Teardown a Daily call client instance.
  /// # Safety
  /// This call will crash if the provided parameter is not a valid pointer to a
  /// previously constructed `DailyCallClient`
  void daily_core_call_client_destroy(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_destroy(
      client,
    );
  }

  late final _daily_core_call_client_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_destroy');
  late final _daily_core_call_client_destroy =
      _daily_core_call_client_destroyPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Register an [EventListener] to receive all events from Daily Core.
  /// If another event listener has been set previously, it will be replaced.
  /// # Safety
  /// This call may crash if the callback or the previously set native context are not valid
  void daily_core_call_client_set_delegate(
    ffi.Pointer<DailyRawCallClient> client,
    DailyCallClientDelegate delegate,
  ) {
    return _daily_core_call_client_set_delegate(
      client,
      delegate,
    );
  }

  late final _daily_core_call_client_set_delegatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>,
              DailyCallClientDelegate)>>('daily_core_call_client_set_delegate');
  late final _daily_core_call_client_set_delegate =
      _daily_core_call_client_set_delegatePtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, DailyCallClientDelegate)>();

  DailyCallClientLiveStreamFns daily_core_call_client_live_stream_fns() {
    return _daily_core_call_client_live_stream_fns();
  }

  late final _daily_core_call_client_live_stream_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientLiveStreamFns Function()>>(
          'daily_core_call_client_live_stream_fns');
  late final _daily_core_call_client_live_stream_fns =
      _daily_core_call_client_live_stream_fnsPtr
          .asFunction<DailyCallClientLiveStreamFns Function()>();

  /// Start a live stream
  void daily_core_call_client_start_live_stream(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _daily_core_call_client_start_live_stream(
      client,
      request_id,
      properties,
    );
  }

  late final _daily_core_call_client_start_live_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_start_live_stream');
  late final _daily_core_call_client_start_live_stream =
      _daily_core_call_client_start_live_streamPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Stop a live stream
  void daily_core_call_client_stop_live_stream(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_stop_live_stream(
      client,
      request_id,
      stream_id,
    );
  }

  late final _daily_core_call_client_stop_live_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_stop_live_stream');
  late final _daily_core_call_client_stop_live_stream =
      _daily_core_call_client_stop_live_streamPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Update a live stream
  void daily_core_call_client_update_live_stream(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> settings,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_update_live_stream(
      client,
      request_id,
      settings,
      stream_id,
    );
  }

  late final _daily_core_call_client_update_live_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_live_stream');
  late final _daily_core_call_client_update_live_stream =
      _daily_core_call_client_update_live_streamPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Add a new endpoints for a live stream
  void daily_core_call_client_add_live_streaming_endpoints(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> endpoints,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_add_live_streaming_endpoints(
      client,
      request_id,
      endpoints,
      stream_id,
    );
  }

  late final _daily_core_call_client_add_live_streaming_endpointsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_add_live_streaming_endpoints');
  late final _daily_core_call_client_add_live_streaming_endpoints =
      _daily_core_call_client_add_live_streaming_endpointsPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Remove endpoints from a live stream
  void daily_core_call_client_remove_live_streaming_endpoints(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> endpoints,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_remove_live_streaming_endpoints(
      client,
      request_id,
      endpoints,
      stream_id,
    );
  }

  late final _daily_core_call_client_remove_live_streaming_endpointsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'daily_core_call_client_remove_live_streaming_endpoints');
  late final _daily_core_call_client_remove_live_streaming_endpoints =
      _daily_core_call_client_remove_live_streaming_endpointsPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  DailyCallClientParticipantsFns daily_core_call_client_participants_fns() {
    return _daily_core_call_client_participants_fns();
  }

  late final _daily_core_call_client_participants_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientParticipantsFns Function()>>(
          'daily_core_call_client_participants_fns');
  late final _daily_core_call_client_participants_fns =
      _daily_core_call_client_participants_fnsPtr
          .asFunction<DailyCallClientParticipantsFns Function()>();

  /// Obtain the current participants in the call
  ffi.Pointer<ffi.Char> daily_core_call_client_participants(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_participants(
      client,
    );
  }

  late final _daily_core_call_client_participantsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_participants');
  late final _daily_core_call_client_participants =
      _daily_core_call_client_participantsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Obtain the current active speaker in the call
  ffi.Pointer<ffi.Char> daily_core_call_client_active_speaker(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_active_speaker(
      client,
    );
  }

  late final _daily_core_call_client_active_speakerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_active_speaker');
  late final _daily_core_call_client_active_speaker =
      _daily_core_call_client_active_speakerPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  ffi.Pointer<ffi.Char> daily_core_call_client_participant_counts(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_participant_counts(
      client,
    );
  }

  late final _daily_core_call_client_participant_countsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_participant_counts');
  late final _daily_core_call_client_participant_counts =
      _daily_core_call_client_participant_countsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Modify things about remote participants that you can control as a meeting
  /// owner.
  void daily_core_call_client_update_remote_participants(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> updates_by_id,
  ) {
    return _daily_core_call_client_update_remote_participants(
      client,
      request_id,
      updates_by_id,
    );
  }

  late final _daily_core_call_client_update_remote_participantsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_remote_participants');
  late final _daily_core_call_client_update_remote_participants =
      _daily_core_call_client_update_remote_participantsPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Eject remote participants.
  void daily_core_call_client_eject_remote_participants(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> ids,
  ) {
    return _daily_core_call_client_eject_remote_participants(
      client,
      request_id,
      ids,
    );
  }

  late final _daily_core_call_client_eject_remote_participantsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_eject_remote_participants');
  late final _daily_core_call_client_eject_remote_participants =
      _daily_core_call_client_eject_remote_participantsPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Register an audio renderer to receive participant audio data for the given
  /// audio source (microphone, screenAudio, ...) from Daily Core. If another
  /// renderer ID has been previously set for the same participant, the new
  /// renderer ID will be used.
  /// # Safety
  /// This might result in a crash if there is no `on_audio_data` delegate.
  void daily_core_call_client_set_participant_audio_renderer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    int renderer_id,
    ffi.Pointer<ffi.Char> participant_id,
    ffi.Pointer<ffi.Char> audio_source,
  ) {
    return _daily_core_call_client_set_participant_audio_renderer(
      client,
      request_id,
      renderer_id,
      participant_id,
      audio_source,
    );
  }

  late final _daily_core_call_client_set_participant_audio_rendererPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<DailyRawCallClient>,
                      ffi.Uint64,
                      ffi.Uint64,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>)>>(
          'daily_core_call_client_set_participant_audio_renderer');
  late final _daily_core_call_client_set_participant_audio_renderer =
      _daily_core_call_client_set_participant_audio_rendererPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Register a video renderer to receive participant frames for the given video
  /// source (camera, screenVideo, ...) from Daily Core. If another renderer ID
  /// has been previously set for the same participant, the new renderer ID will
  /// be used.
  /// # Safety
  /// This might result in a crash if there is no `on_video_frame` delegate.
  void daily_core_call_client_set_participant_video_renderer(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    int renderer_id,
    ffi.Pointer<ffi.Char> participant_id,
    ffi.Pointer<ffi.Char> video_source,
    ffi.Pointer<ffi.Char> color_format,
  ) {
    return _daily_core_call_client_set_participant_video_renderer(
      client,
      request_id,
      renderer_id,
      participant_id,
      video_source,
      color_format,
    );
  }

  late final _daily_core_call_client_set_participant_video_rendererPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<DailyRawCallClient>,
                      ffi.Uint64,
                      ffi.Uint64,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>)>>(
          'daily_core_call_client_set_participant_video_renderer');
  late final _daily_core_call_client_set_participant_video_renderer =
      _daily_core_call_client_set_participant_video_rendererPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  DailyCallClientPublishingFns daily_core_call_client_publishing_fns() {
    return _daily_core_call_client_publishing_fns();
  }

  late final _daily_core_call_client_publishing_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientPublishingFns Function()>>(
          'daily_core_call_client_publishing_fns');
  late final _daily_core_call_client_publishing_fns =
      _daily_core_call_client_publishing_fnsPtr
          .asFunction<DailyCallClientPublishingFns Function()>();

  /// Obtain the current publishing settings for this call
  /// # Safety
  /// Will crash if the `query_config` parameter is not a valid pointer
  /// to a `const char *` (or `nullptr`)
  ffi.Pointer<ffi.Char> daily_core_call_client_publishing(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_publishing(
      client,
    );
  }

  late final _daily_core_call_client_publishingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_publishing');
  late final _daily_core_call_client_publishing =
      _daily_core_call_client_publishingPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Update the desired publishing settings for this call
  /// # Safety
  /// Will crash if the `publishing_settings` parameter is
  /// not a valid pointer to `const char *`
  void daily_core_call_client_update_publishing(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> publishing_settings,
  ) {
    return _daily_core_call_client_update_publishing(
      client,
      request_id,
      publishing_settings,
    );
  }

  late final _daily_core_call_client_update_publishingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_publishing');
  late final _daily_core_call_client_update_publishing =
      _daily_core_call_client_update_publishingPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  DailyCallClientRecordingFns daily_core_call_client_recording_fns() {
    return _daily_core_call_client_recording_fns();
  }

  late final _daily_core_call_client_recording_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientRecordingFns Function()>>(
          'daily_core_call_client_recording_fns');
  late final _daily_core_call_client_recording_fns =
      _daily_core_call_client_recording_fnsPtr
          .asFunction<DailyCallClientRecordingFns Function()>();

  /// Start a recording
  void daily_core_call_client_start_recording(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _daily_core_call_client_start_recording(
      client,
      request_id,
      properties,
    );
  }

  late final _daily_core_call_client_start_recordingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_start_recording');
  late final _daily_core_call_client_start_recording =
      _daily_core_call_client_start_recordingPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Stop a recording
  void daily_core_call_client_stop_recording(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_stop_recording(
      client,
      request_id,
      stream_id,
    );
  }

  late final _daily_core_call_client_stop_recordingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('daily_core_call_client_stop_recording');
  late final _daily_core_call_client_stop_recording =
      _daily_core_call_client_stop_recordingPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Update a recording
  void daily_core_call_client_update_recording(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> settings,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _daily_core_call_client_update_recording(
      client,
      request_id,
      settings,
      stream_id,
    );
  }

  late final _daily_core_call_client_update_recordingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_recording');
  late final _daily_core_call_client_update_recording =
      _daily_core_call_client_update_recordingPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  DailyCallClientSubscriptionsFns daily_core_call_client_subscriptions_fns() {
    return _daily_core_call_client_subscriptions_fns();
  }

  late final _daily_core_call_client_subscriptions_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientSubscriptionsFns Function()>>(
          'daily_core_call_client_subscriptions_fns');
  late final _daily_core_call_client_subscriptions_fns =
      _daily_core_call_client_subscriptions_fnsPtr
          .asFunction<DailyCallClientSubscriptionsFns Function()>();

  /// Obtain the current subscription settings
  ffi.Pointer<ffi.Char> daily_core_call_client_subscriptions(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_subscriptions(
      client,
    );
  }

  late final _daily_core_call_client_subscriptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_subscriptions');
  late final _daily_core_call_client_subscriptions =
      _daily_core_call_client_subscriptionsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Update the desired subscription settings for this call
  /// # Safety
  /// Will crash if the `participant_settings` or `profile_settings` parameters
  /// are not valid pointers to `const char *`
  void daily_core_call_client_update_subscriptions(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> participant_settings,
    ffi.Pointer<ffi.Char> profile_settings,
  ) {
    return _daily_core_call_client_update_subscriptions(
      client,
      request_id,
      participant_settings,
      profile_settings,
    );
  }

  late final _daily_core_call_client_update_subscriptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_subscriptions');
  late final _daily_core_call_client_update_subscriptions =
      _daily_core_call_client_update_subscriptionsPtr.asFunction<
          void Function(ffi.Pointer<DailyRawCallClient>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Obtain the current subscription profiles
  ffi.Pointer<ffi.Char> daily_core_call_client_subscription_profiles(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_subscription_profiles(
      client,
    );
  }

  late final _daily_core_call_client_subscription_profilesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_subscription_profiles');
  late final _daily_core_call_client_subscription_profiles =
      _daily_core_call_client_subscription_profilesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  /// Update the current subscription profiles
  /// # Safety
  /// This call will crash if `profile_settings` is not a valid pointer to a non-null
  /// const char* containing the profiles as JSON
  void daily_core_call_client_update_subscription_profiles(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> profile_settings,
  ) {
    return _daily_core_call_client_update_subscription_profiles(
      client,
      request_id,
      profile_settings,
    );
  }

  late final _daily_core_call_client_update_subscription_profilesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_subscription_profiles');
  late final _daily_core_call_client_update_subscription_profiles =
      _daily_core_call_client_update_subscription_profilesPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  DailyCallClientTelemetryFns daily_core_call_client_telemetry_fns() {
    return _daily_core_call_client_telemetry_fns();
  }

  late final _daily_core_call_client_telemetry_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientTelemetryFns Function()>>(
          'daily_core_call_client_telemetry_fns');
  late final _daily_core_call_client_telemetry_fns =
      _daily_core_call_client_telemetry_fnsPtr
          .asFunction<DailyCallClientTelemetryFns Function()>();

  ffi.Pointer<ffi.Char> daily_core_call_client_get_network_stats(
    ffi.Pointer<DailyRawCallClient> client,
  ) {
    return _daily_core_call_client_get_network_stats(
      client,
    );
  }

  late final _daily_core_call_client_get_network_statsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>>(
      'daily_core_call_client_get_network_stats');
  late final _daily_core_call_client_get_network_stats =
      _daily_core_call_client_get_network_statsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient>)>();

  DailyCallClientTranscriptionFns daily_core_call_client_transcription_fns() {
    return _daily_core_call_client_transcription_fns();
  }

  late final _daily_core_call_client_transcription_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientTranscriptionFns Function()>>(
          'daily_core_call_client_transcription_fns');
  late final _daily_core_call_client_transcription_fns =
      _daily_core_call_client_transcription_fnsPtr
          .asFunction<DailyCallClientTranscriptionFns Function()>();

  /// Start a transcription
  void daily_core_call_client_start_transcription(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _daily_core_call_client_start_transcription(
      client,
      request_id,
      properties,
    );
  }

  late final _daily_core_call_client_start_transcriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_start_transcription');
  late final _daily_core_call_client_start_transcription =
      _daily_core_call_client_start_transcriptionPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Stop a transcription
  void daily_core_call_client_stop_transcription(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
  ) {
    return _daily_core_call_client_stop_transcription(
      client,
      request_id,
    );
  }

  late final _daily_core_call_client_stop_transcriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>,
              ffi.Uint64)>>('daily_core_call_client_stop_transcription');
  late final _daily_core_call_client_stop_transcription =
      _daily_core_call_client_stop_transcriptionPtr
          .asFunction<void Function(ffi.Pointer<DailyRawCallClient>, int)>();

  DailyCallClientUserFns daily_core_call_client_user_fns() {
    return _daily_core_call_client_user_fns();
  }

  late final _daily_core_call_client_user_fnsPtr =
      _lookup<ffi.NativeFunction<DailyCallClientUserFns Function()>>(
          'daily_core_call_client_user_fns');
  late final _daily_core_call_client_user_fns =
      _daily_core_call_client_user_fnsPtr
          .asFunction<DailyCallClientUserFns Function()>();

  /// Set the username
  void daily_core_call_client_set_user_name(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> user_name,
  ) {
    return _daily_core_call_client_set_user_name(
      client,
      request_id,
      user_name,
    );
  }

  late final _daily_core_call_client_set_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('daily_core_call_client_set_user_name');
  late final _daily_core_call_client_set_user_name =
      _daily_core_call_client_set_user_namePtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Modify your own permissions
  void daily_core_call_client_update_permissions(
    ffi.Pointer<DailyRawCallClient> client,
    int request_id,
    ffi.Pointer<ffi.Char> update,
  ) {
    return _daily_core_call_client_update_permissions(
      client,
      request_id,
      update,
    );
  }

  late final _daily_core_call_client_update_permissionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient>, ffi.Uint64,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_call_client_update_permissions');
  late final _daily_core_call_client_update_permissions =
      _daily_core_call_client_update_permissionsPtr.asFunction<
          void Function(
              ffi.Pointer<DailyRawCallClient>, int, ffi.Pointer<ffi.Char>)>();

  /// Returns a borrowed pointer to the WebRTC `PeerConnectionFactory`.
  ffi.Pointer<ffi.Void> daily_core_context_peer_connection_factory() {
    return _daily_core_context_peer_connection_factory();
  }

  late final _daily_core_context_peer_connection_factoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'daily_core_context_peer_connection_factory');
  late final _daily_core_context_peer_connection_factory =
      _daily_core_context_peer_connection_factoryPtr
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns a borrowed pointer to the WebRTC network thread.
  ffi.Pointer<ffi.Void> daily_core_context_network_thread() {
    return _daily_core_context_network_thread();
  }

  late final _daily_core_context_network_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'daily_core_context_network_thread');
  late final _daily_core_context_network_thread =
      _daily_core_context_network_threadPtr
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns a borrowed pointer to the WebRTC worker thread.
  ffi.Pointer<ffi.Void> daily_core_context_worker_thread() {
    return _daily_core_context_worker_thread();
  }

  late final _daily_core_context_worker_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'daily_core_context_worker_thread');
  late final _daily_core_context_worker_thread =
      _daily_core_context_worker_threadPtr
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns a borrowed pointer to the WebRTC signaling thread.
  ffi.Pointer<ffi.Void> daily_core_context_signaling_thread() {
    return _daily_core_context_signaling_thread();
  }

  late final _daily_core_context_signaling_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'daily_core_context_signaling_thread');
  late final _daily_core_context_signaling_thread =
      _daily_core_context_signaling_threadPtr
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns a borrowed pointer to the WebRTC `PeerConnectionFactory`.
  ffi.Pointer<ffi.Void> daily_core_context_track_retained(
    ffi.Pointer<ffi.Char> id_ptr,
  ) {
    return _daily_core_context_track_retained(
      id_ptr,
    );
  }

  late final _daily_core_context_track_retainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('daily_core_context_track_retained');
  late final _daily_core_context_track_retained =
      _daily_core_context_track_retainedPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  void daily_core_context_track_release(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _daily_core_context_track_release(
      ptr,
    );
  }

  late final _daily_core_context_track_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'daily_core_context_track_release');
  late final _daily_core_context_track_release =
      _daily_core_context_track_releasePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Creates a backing execution context.
  ///
  /// A backing execution context must exist before any FFI other `daily_core_…()`
  /// functions may be called.
  ///
  /// Note however that only ONE backing context MUST exist at a time.
  /// As such any additional call of this function must be preceded
  /// by a corresponding call of [daily_core_context_destroy].
  ///
  /// The user of Daily is responsible for invoking
  /// [daily_core_context_destroy] to correctly clean up on application
  /// termination and/or after the last call-client has been destroyed (if desirable).
  void daily_core_context_create(
    DailyContextDelegate delegate,
    DailyWebRtcContextDelegate webrtc_delegate,
    DailyAboutClient about_client,
  ) {
    return _daily_core_context_create(
      delegate,
      webrtc_delegate,
      about_client,
    );
  }

  late final _daily_core_context_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(DailyContextDelegate, DailyWebRtcContextDelegate,
              DailyAboutClient)>>('daily_core_context_create');
  late final _daily_core_context_create =
      _daily_core_context_createPtr.asFunction<
          void Function(DailyContextDelegate, DailyWebRtcContextDelegate,
              DailyAboutClient)>();

  /// This function is identical to [daily_core_context_create], but allows
  /// for customizing the number of worker threads available to the execution
  /// context.
  void daily_core_context_create_with_threads(
    DailyContextDelegate delegate,
    DailyWebRtcContextDelegate webrtc_delegate,
    DailyAboutClient about_client,
    int worker_threads,
  ) {
    return _daily_core_context_create_with_threads(
      delegate,
      webrtc_delegate,
      about_client,
      worker_threads,
    );
  }

  late final _daily_core_context_create_with_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              DailyContextDelegate,
              DailyWebRtcContextDelegate,
              DailyAboutClient,
              ffi.UintPtr)>>('daily_core_context_create_with_threads');
  late final _daily_core_context_create_with_threads =
      _daily_core_context_create_with_threadsPtr.asFunction<
          void Function(DailyContextDelegate, DailyWebRtcContextDelegate,
              DailyAboutClient, int)>();

  /// Destroys the backing execution context created via [daily_core_context_create].
  ///
  /// The user of Daily is responsible for invoking this function on application
  /// termination and/or after the last call-client has been destroyed (if desirable).
  void daily_core_context_destroy() {
    return _daily_core_context_destroy();
  }

  late final _daily_core_context_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'daily_core_context_destroy');
  late final _daily_core_context_destroy =
      _daily_core_context_destroyPtr.asFunction<void Function()>();

  /// Creates a device manager. The device manager can handle system and virtual
  /// devices. New virtual devices can be added with
  /// [daily_core_context_create_virtual_camera_device],
  /// [daily_core_context_create_virtual_microphone_device] or
  /// [daily_core_context_create_virtual_speaker_device].
  ffi.Pointer<ffi.Void> daily_core_context_create_device_manager() {
    return _daily_core_context_create_device_manager();
  }

  late final _daily_core_context_create_device_managerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'daily_core_context_create_device_manager');
  late final _daily_core_context_create_device_manager =
      _daily_core_context_create_device_managerPtr
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Creates a virtual audio device module. New virtual audio devices
  /// (microphones and speakers) can then be added.
  ///
  /// This audio device module can be created through the
  /// `create_audio_device_module` callback passed to
  /// [daily_core_context_create].
  ffi.Pointer<ffi.Void> daily_core_context_create_audio_device_module(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Void> task_queue_factory,
  ) {
    return _daily_core_context_create_audio_device_module(
      device_manager,
      task_queue_factory,
    );
  }

  late final _daily_core_context_create_audio_device_modulePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
      'daily_core_context_create_audio_device_module');
  late final _daily_core_context_create_audio_device_module =
      _daily_core_context_create_audio_device_modulePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// Implements enumeratedDevices for a previously created device manager.
  ffi.Pointer<ffi.Char> daily_core_context_device_manager_enumerated_devices(
    ffi.Pointer<ffi.Void> device_manager,
  ) {
    return _daily_core_context_device_manager_enumerated_devices(
      device_manager,
    );
  }

  late final _daily_core_context_device_manager_enumerated_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'daily_core_context_device_manager_enumerated_devices');
  late final _daily_core_context_device_manager_enumerated_devices =
      _daily_core_context_device_manager_enumerated_devicesPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// Implements getUserMedia for a previously created device manager. It is meant
  /// to be used for system and virtual devices. For example, a new virtual
  /// microphone device can be created via
  /// [daily_core_context_create_microphone_device] with a given device name. That
  /// device name can then be used as a `deviceId` in the microphone settings when
  /// specifying the inputs.
  ffi.Pointer<ffi.Void> daily_core_context_device_manager_get_user_media(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Void> peer_connection_factory,
    ffi.Pointer<ffi.Void> signaling_thread,
    ffi.Pointer<ffi.Void> worker_thread,
    ffi.Pointer<ffi.Void> network_thread,
    ffi.Pointer<ffi.Char> constraints,
  ) {
    return _daily_core_context_device_manager_get_user_media(
      device_manager,
      peer_connection_factory,
      signaling_thread,
      worker_thread,
      network_thread,
      constraints,
    );
  }

  late final _daily_core_context_device_manager_get_user_mediaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_context_device_manager_get_user_media');
  late final _daily_core_context_device_manager_get_user_media =
      _daily_core_context_device_manager_get_user_mediaPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>();

  /// Creates a virtual camera device. This virtual camera device can be used to
  /// send video frames to the meeting. The resolution (width and height) and
  /// color format of the camera need to be specified to know what type of frames
  /// are then written with
  /// [daily_core_context_virtual_camera_device_write_frame]. For example,
  /// internally frames are converted to I420 so the color format is used to know
  /// what type of conversion needs to be applied.
  ffi.Pointer<ffi.Void> daily_core_context_create_virtual_camera_device(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Char> device_name,
    int width,
    int height,
    ffi.Pointer<ffi.Char> color_format,
  ) {
    return _daily_core_context_create_virtual_camera_device(
      device_manager,
      device_name,
      width,
      height,
      color_format,
    );
  }

  late final _daily_core_context_create_virtual_camera_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Char>)>>(
      'daily_core_context_create_virtual_camera_device');
  late final _daily_core_context_create_virtual_camera_device =
      _daily_core_context_create_virtual_camera_devicePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  /// Writes a video frame to a virtual camera device created with
  /// [daily_core_context_create_virtual_camera_device]. The video frame
  /// resolution (width and height) and color format needs to match the one
  /// specified by the camema.
  void daily_core_context_virtual_camera_device_write_frame(
    ffi.Pointer<ffi.Void> device,
    ffi.Pointer<ffi.Uint8> frame,
    int size,
  ) {
    return _daily_core_context_virtual_camera_device_write_frame(
      device,
      frame,
      size,
    );
  }

  late final _daily_core_context_virtual_camera_device_write_framePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>(
      'daily_core_context_virtual_camera_device_write_frame');
  late final _daily_core_context_virtual_camera_device_write_frame =
      _daily_core_context_virtual_camera_device_write_framePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Creates a virtual speaker device. This device will only be created if an
  /// audio device module has been previously created with
  /// [daily_core_context_create_audio_device_module].
  ///
  /// A virtual speaker device can be used to receive audio samples from the
  /// meeting.
  ffi.Pointer<DailyVirtualSpeakerDevice>
      daily_core_context_create_virtual_speaker_device(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Char> device_name,
    int sample_rate,
    int channels,
    bool non_blocking,
  ) {
    return _daily_core_context_create_virtual_speaker_device(
      device_manager,
      device_name,
      sample_rate,
      channels,
      non_blocking,
    );
  }

  late final _daily_core_context_create_virtual_speaker_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DailyVirtualSpeakerDevice> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Uint8,
              ffi.Bool)>>('daily_core_context_create_virtual_speaker_device');
  late final _daily_core_context_create_virtual_speaker_device =
      _daily_core_context_create_virtual_speaker_devicePtr.asFunction<
          ffi.Pointer<DailyVirtualSpeakerDevice> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, int, bool)>();

  /// Creates a virtual microphone device. This device will only be created if an
  /// audio device module has been previously created with
  /// [daily_core_context_create_audio_device_module].
  ///
  /// A virtual microphone device can be used to send audio samples to the
  /// meeting.
  ffi.Pointer<DailyVirtualMicrophoneDevice>
      daily_core_context_create_virtual_microphone_device(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Char> device_name,
    int sample_rate,
    int channels,
    bool non_blocking,
  ) {
    return _daily_core_context_create_virtual_microphone_device(
      device_manager,
      device_name,
      sample_rate,
      channels,
      non_blocking,
    );
  }

  late final _daily_core_context_create_virtual_microphone_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<DailyVirtualMicrophoneDevice> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Uint32,
                  ffi.Uint8,
                  ffi.Bool)>>(
      'daily_core_context_create_virtual_microphone_device');
  late final _daily_core_context_create_virtual_microphone_device =
      _daily_core_context_create_virtual_microphone_devicePtr.asFunction<
          ffi.Pointer<DailyVirtualMicrophoneDevice> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, int, bool)>();

  /// Selects the given speaker device as the system's active speaker device. This
  /// can be a system or a virtual speaker. Returns true if the device was
  /// selected properly, false otherwise.
  bool daily_core_context_select_speaker_device(
    ffi.Pointer<ffi.Void> device_manager,
    ffi.Pointer<ffi.Char> device_name,
  ) {
    return _daily_core_context_select_speaker_device(
      device_manager,
      device_name,
    );
  }

  late final _daily_core_context_select_speaker_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'daily_core_context_select_speaker_device');
  late final _daily_core_context_select_speaker_device =
      _daily_core_context_select_speaker_devicePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// Returns the current selected speaker device or NULL if no device is selected
  /// yet.
  ffi.Pointer<DailyVirtualSpeakerDevice>
      daily_core_context_get_selected_speaker_device(
    ffi.Pointer<ffi.Void> device_manager,
  ) {
    return _daily_core_context_get_selected_speaker_device(
      device_manager,
    );
  }

  late final _daily_core_context_get_selected_speaker_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<DailyVirtualSpeakerDevice> Function(
                  ffi.Pointer<ffi.Void>)>>(
      'daily_core_context_get_selected_speaker_device');
  late final _daily_core_context_get_selected_speaker_device =
      _daily_core_context_get_selected_speaker_devicePtr.asFunction<
          ffi.Pointer<DailyVirtualSpeakerDevice> Function(
              ffi.Pointer<ffi.Void>)>();

  /// Returns the current selected microphone device or NULL if no device is
  /// selected yet.
  ffi.Pointer<DailyVirtualMicrophoneDevice>
      daily_core_context_get_selected_microphone_device(
    ffi.Pointer<ffi.Void> device_manager,
  ) {
    return _daily_core_context_get_selected_microphone_device(
      device_manager,
    );
  }

  late final _daily_core_context_get_selected_microphone_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<DailyVirtualMicrophoneDevice> Function(
                  ffi.Pointer<ffi.Void>)>>(
      'daily_core_context_get_selected_microphone_device');
  late final _daily_core_context_get_selected_microphone_device =
      _daily_core_context_get_selected_microphone_devicePtr.asFunction<
          ffi.Pointer<DailyVirtualMicrophoneDevice> Function(
              ffi.Pointer<ffi.Void>)>();

  /// Read audio frames from a virtual speaker device created with
  /// [daily_core_context_create_virtual_speaker_device]. Returns the number of
  /// audio frames read.
  int daily_core_context_virtual_speaker_device_read_frames(
    ffi.Pointer<DailyVirtualSpeakerDevice> device,
    ffi.Pointer<ffi.Int16> frames,
    int num_frames,
    int request_id,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
                    ffi.Pointer<ffi.Int16>, ffi.UintPtr)>>
        callback,
    ffi.Pointer<ffi.Void> callback_target,
  ) {
    return _daily_core_context_virtual_speaker_device_read_frames(
      device,
      frames,
      num_frames,
      request_id,
      callback,
      callback_target,
    );
  }

  late final _daily_core_context_virtual_speaker_device_read_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<DailyVirtualSpeakerDevice>,
                      ffi.Pointer<ffi.Int16>,
                      ffi.UintPtr,
                      ffi.Uint64,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<ffi.Void>,
                                  ffi.Uint64,
                                  ffi.Pointer<ffi.Int16>,
                                  ffi.UintPtr)>>,
                      ffi.Pointer<ffi.Void>)>>(
          'daily_core_context_virtual_speaker_device_read_frames');
  late final _daily_core_context_virtual_speaker_device_read_frames =
      _daily_core_context_virtual_speaker_device_read_framesPtr.asFunction<
          int Function(
              ffi.Pointer<DailyVirtualSpeakerDevice>,
              ffi.Pointer<ffi.Int16>,
              int,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
                          ffi.Pointer<ffi.Int16>, ffi.UintPtr)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Writes audio frames to a virtual microphone device created with
  /// [daily_core_context_create_virtual_microphone_device]. Returns the number of
  /// audio frames written.
  int daily_core_context_virtual_microphone_device_write_frames(
    ffi.Pointer<DailyVirtualMicrophoneDevice> device,
    ffi.Pointer<ffi.Int16> frames,
    int num_frames,
    int request_id,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Uint64, ffi.UintPtr)>>
        callback,
    ffi.Pointer<ffi.Void> callback_target,
  ) {
    return _daily_core_context_virtual_microphone_device_write_frames(
      device,
      frames,
      num_frames,
      request_id,
      callback,
      callback_target,
    );
  }

  late final _daily_core_context_virtual_microphone_device_write_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<DailyVirtualMicrophoneDevice>,
                      ffi.Pointer<ffi.Int16>,
                      ffi.UintPtr,
                      ffi.Uint64,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>,
                                  ffi.Uint64, ffi.UintPtr)>>,
                      ffi.Pointer<ffi.Void>)>>(
          'daily_core_context_virtual_microphone_device_write_frames');
  late final _daily_core_context_virtual_microphone_device_write_frames =
      _daily_core_context_virtual_microphone_device_write_framesPtr.asFunction<
          int Function(
              ffi.Pointer<DailyVirtualMicrophoneDevice>,
              ffi.Pointer<ffi.Int16>,
              int,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint64, ffi.UintPtr)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Creates a native VAD analyzer. VADs are used to detect speech.
  ffi.Pointer<ffi.Void> daily_core_context_create_vad(
    int reset_period_ms,
    int sample_rate,
    int channels,
  ) {
    return _daily_core_context_create_vad(
      reset_period_ms,
      sample_rate,
      channels,
    );
  }

  late final _daily_core_context_create_vadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Uint32, ffi.Uint32,
              ffi.Uint8)>>('daily_core_context_create_vad');
  late final _daily_core_context_create_vad = _daily_core_context_create_vadPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  /// Use VAD to analyze 10ms of audio frames. If more than 10ms of audio frames
  /// are given, only the first 10ms will be used.
  double daily_core_context_vad_analyze(
    ffi.Pointer<ffi.Void> vad,
    ffi.Pointer<ffi.Int16> frames,
    int num_frames,
  ) {
    return _daily_core_context_vad_analyze(
      vad,
      frames,
      num_frames,
    );
  }

  late final _daily_core_context_vad_analyzePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int16>,
              ffi.UintPtr)>>('daily_core_context_vad_analyze');
  late final _daily_core_context_vad_analyze =
      _daily_core_context_vad_analyzePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int16>, int)>();

  /// Set the WebRTC, mediasoupclient, and daily log levels.
  void daily_core_set_log_level(
    int log_level,
  ) {
    return _daily_core_set_log_level(
      log_level,
    );
  }

  late final _daily_core_set_log_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'daily_core_set_log_level');
  late final _daily_core_set_log_level =
      _daily_core_set_log_levelPtr.asFunction<void Function(int)>();

  /// \mainpage Dynamically Linked Dart API
  ///
  /// This exposes a subset of symbols from dart_api.h and dart_native_api.h
  /// available in every Dart embedder through dynamic linking.
  ///
  /// All symbols are postfixed with _DL to indicate that they are dynamically
  /// linked and to prevent conflicts with the original symbol.
  ///
  /// Link `dart_api_dl.c` file into your library and invoke
  /// `Dart_InitializeApiDL` with `NativeApi.initializeApiDLData`.
  int Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _Dart_InitializeApiDL(
      data,
    );
  }

  late final _Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_InitializeApiDL');
  late final _Dart_InitializeApiDL = _Dart_InitializeApiDLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();
}

abstract class DailyCallState {
  static const int DailyCallState_Initialized = 0;
  static const int DailyCallState_Joining = 1;
  static const int DailyCallState_Joined = 2;
  static const int DailyCallState_Leaving = 3;
  static const int DailyCallState_Left = 4;
}

abstract class DailyLogLevel {
  /// A level lower than all log levels.
  static const int DailyLogLevel_Off = 0;

  /// Corresponds to the `Error` log level.
  static const int DailyLogLevel_Error = 1;

  /// Corresponds to the `Warn` log level.
  static const int DailyLogLevel_Warn = 2;

  /// Corresponds to the `Info` log level.
  static const int DailyLogLevel_Info = 3;

  /// Corresponds to the `Debug` log level.
  static const int DailyLogLevel_Debug = 4;

  /// Corresponds to the `Trace` log level.
  static const int DailyLogLevel_Trace = 5;
}

final class DailyRawCallClient extends ffi.Opaque {}

final class DailyCallClientAppMessageFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> message,
              ffi.Pointer<ffi.Char> participant)>> send_app_message;
}

final class DailyCallClientAudioLevelFns extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
                  ffi.Uint64 request_id, ffi.Uint64 interval)>>
      start_remote_participants_audio_level_observer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
                  ffi.Uint64 request_id)>>
      stop_remote_participants_audio_level_observer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Uint64 interval)>> start_local_audio_level_observer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id)>> stop_local_audio_level_observer;
}

final class DailyCallClientCallStateFns extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<DailyRawCallClient> client)>>
      call_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> url,
              ffi.Pointer<ffi.Char> token)>> call_config_for;
}

final class DailyCallClientConnectionFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> url,
              ffi.Pointer<ffi.Char> token,
              ffi.Pointer<ffi.Char> client_settings)>> join;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id)>> leave;
}

final class DailyCallClientDevicesFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DailyRawCallClient> client,
              ffi.Pointer<ffi.Char> config)>> available_devices;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DailyRawCallClient> client)>>
      trigger_devices_changed;
}

final class DailyCallClientInputsFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> inputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> input_settings)>> update_inputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Void> track_ptr)>> add_custom_video_track;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Void> track_ptr)>> update_custom_video_track;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> name)>> remove_custom_video_track;
}

final class DailyVideoFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.UintPtr()
  external int buffer_size;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int64()
  external int timestamp_us;

  external ffi.Pointer<ffi.Char> color_format;
}

/// Functions for integrating Daily with the given native platform.
final class DailyCallClientDelegateFns extends ffi.Struct {
  external DailyCallClientOnEventFn on_event;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClientDelegate>,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<NativeAudioData>)>> on_audio_data;

  external DailyCallClientOnVideoFrameFn on_video_frame;
}

typedef DailyCallClientOnEventFn
    = ffi.Pointer<ffi.NativeFunction<DailyCallClientOnEventFnFunction>>;
typedef DailyCallClientOnEventFnFunction = ffi.Void Function(
    ffi.Pointer<DailyRawCallClientDelegate> delegate,
    ffi.Pointer<ffi.Char> event_json,
    ffi.IntPtr json_len);
typedef DartDailyCallClientOnEventFnFunction = void Function(
    ffi.Pointer<DailyRawCallClientDelegate> delegate,
    ffi.Pointer<ffi.Char> event_json,
    int json_len);
typedef DailyRawCallClientDelegate = ffi.Void;
typedef DartDailyRawCallClientDelegate = void;

final class NativeAudioData extends ffi.Struct {
  @ffi.Uint32()
  external int bits_per_sample;

  @ffi.Uint32()
  external int sample_rate;

  @ffi.UintPtr()
  external int num_channels;

  @ffi.UintPtr()
  external int num_audio_frames;

  external ffi.Pointer<ffi.Uint8> audio_frames;
}

typedef DailyCallClientOnVideoFrameFn
    = ffi.Pointer<ffi.NativeFunction<DailyCallClientOnVideoFrameFnFunction>>;
typedef DailyCallClientOnVideoFrameFnFunction = ffi.Void Function(
    ffi.Pointer<DailyRawCallClientDelegate> delegate,
    ffi.Uint64 renderer_id,
    ffi.Pointer<ffi.Char> peer_id,
    ffi.Pointer<DailyVideoFrame> frame);
typedef DartDailyCallClientOnVideoFrameFnFunction = void Function(
    ffi.Pointer<DailyRawCallClientDelegate> delegate,
    int renderer_id,
    ffi.Pointer<ffi.Char> peer_id,
    ffi.Pointer<DailyVideoFrame> frame);

final class DailyCallClientDelegate extends ffi.Struct {
  /// The functions' optional context (e.g. receiver).
  external DailyCallClientDelegatePtr ptr;

  /// Functions for integrating with platform.
  external DailyCallClientDelegateFns fns;
}

/// Pointer to `CallClient`'s delegate object.
typedef DailyCallClientDelegatePtr = ffi.Pointer<DailyRawCallClientDelegate>;

final class DailyCallClientLifecycleFns extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<DailyRawCallClient> Function()>>
      create;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
              DailyCallClientDelegate delegate)>> set_delegate;
}

final class DailyCallClientLiveStreamFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> properties)>> start_live_stream;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> stream_id)>> stop_live_stream;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> settings,
              ffi.Pointer<ffi.Char> stream_id)>> update_live_stream;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> endpoints,
              ffi.Pointer<ffi.Char> stream_id)>> add_live_streaming_endpoints;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<DailyRawCallClient> client,
                  ffi.Uint64 request_id,
                  ffi.Pointer<ffi.Char> endpoints,
                  ffi.Pointer<ffi.Char> stream_id)>>
      remove_live_streaming_endpoints;
}

final class DailyCallClientParticipantsFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> participants;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> active_speaker;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> participant_counts;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> updates_by_id)>> update_remote_participants;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> ids)>> eject_remote_participants;
}

final class DailyCallClientPublishingFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> publishing;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> publishing_settings)>> update_publishing;
}

final class DailyCallClientRecordingFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> properties)>> start_recording;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> stream_id)>> stop_recording;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> settings,
              ffi.Pointer<ffi.Char> stream_id)>> update_recording;
}

final class DailyCallClientSubscriptionsFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> subscriptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> participant_settings,
              ffi.Pointer<ffi.Char> profile_settings)>> update_subscriptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> subscription_profiles;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<DailyRawCallClient> client,
                  ffi.Uint64 request_id,
                  ffi.Pointer<ffi.Char> profile_settings)>>
      update_subscription_profiles;
}

final class DailyCallClientTelemetryFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DailyRawCallClient> client)>> get_network_stats;
}

final class DailyCallClientTranscriptionFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> properties)>> start_transcription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id)>> stop_transcription;
}

final class DailyCallClientUserFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> user_name)>> set_user_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> update)>> update_permissions;
}

final class DailyCallClientFns extends ffi.Struct {
  external DailyCallClientAppMessageFns app_message;

  external DailyCallClientAudioLevelFns audio_level;

  external DailyCallClientCallStateFns call_state;

  external DailyCallClientConnectionFns connection;

  external DailyCallClientDevicesFns devices;

  external DailyCallClientInputsFns inputs;

  external DailyCallClientLifecycleFns lifecycle;

  external DailyCallClientLiveStreamFns live_stream;

  external DailyCallClientParticipantsFns participants;

  external DailyCallClientPublishingFns publishing;

  external DailyCallClientRecordingFns recording;

  external DailyCallClientSubscriptionsFns subscriptions;

  external DailyCallClientTelemetryFns telemetry;

  external DailyCallClientTranscriptionFns transcription;

  external DailyCallClientUserFns user;
}

final class DailyContextDelegate extends ffi.Struct {
  /// The functions' optional context (e.g. receiver).
  external DailyContextDelegatePtr ptr;
}

/// Pointer to `Context`'s delegate object.
typedef DailyContextDelegatePtr = ffi.Pointer<DailyRawContextDelegate>;
typedef DailyRawContextDelegate = ffi.Void;
typedef DartDailyRawContextDelegate = void;

/// Functions for integrating Daily with the given native platform.
final class DailyWebRtcContextDelegateFns extends ffi.Struct {
  /// Platform-provided implementation of `MediaDevices.getUserMedia()`.
  external DailyWebRtcContextDelegateGetUserMediaFn get_user_media;

  /// Platform-provided implementation of `MediaDevices.getDisplayMedia()`.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<DailyRawWebRtcContextDelegate>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>> get_display_media;

  /// Platform-provided implementation of `MediaDevices.enumerateDevices()`.
  external DailyWebRtcContextDelegateGetEnumeratedDevicesFn
      get_enumerated_devices;

  /// Platform-provided function to create a new WebRTC AudioDeviceModule
  external DailyWebRtcContextDelegateCreateAudioDeviceModuleFn
      create_audio_device_module;

  /// Platform-provided function to create a new WebRTC VideoDecoderFactory
  external DailyWebRtcContextDelegateCreateVideoDecoderFactoryFn
      create_video_decoder_factory;

  /// Platform-provided function to create a new WebRTC VideoEncoderFactory
  external DailyWebRtcContextDelegateCreateVideoEncoderFactoryFn
      create_video_encoder_factory;

  /// Platform-provided function to create a new WebRTC AudioDecoderFactory
  external DailyWebRtcContextDelegateCreateAudioDecoderFactoryFn
      create_audio_decoder_factory;

  /// Platform-provided function to create a new WebRTC AudioEncoderFactory
  external DailyWebRtcContextDelegateCreateAudioEncoderFactoryFn
      create_audio_encoder_factory;

  /// Platform-provided function to allow the mobile devices change the audio route
  external DailyWebRtcContextDelegateGetAudioDeviceFn get_audio_device;

  external DailyWebRtcContextDelegateSetAudioDeviceFn set_audio_device;
}

/// Platform-provided implementation of `MediaDevices.getUserMedia()`.
///
/// Arguments:
/// - `platform_ctx`: The functions' optional context (e.g. receiver).
/// - `peer_connection_factory`: Borrowed pointer to the peer connection factory (PCF).
/// - `signaling_thread`: Borrowed pointer to the PCF's signaling thread.
/// - `worker_thread`: Borrowed pointer to the PCF's worker thread.
/// - `constraints`: Borrowed pointer to JSON-encoded constraints.
///
/// Returns a retained `webrtc::MediaStreamInterface*`, detached via `.release()`.
typedef DailyWebRtcContextDelegateGetUserMediaFn = ffi.Pointer<
    ffi.NativeFunction<DailyWebRtcContextDelegateGetUserMediaFnFunction>>;
typedef DailyWebRtcContextDelegateGetUserMediaFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate,
        ffi.Pointer<ffi.Void> peer_connection_factory,
        ffi.Pointer<ffi.Void> signaling_thread,
        ffi.Pointer<ffi.Void> worker_thread,
        ffi.Pointer<ffi.Void> network_thread,
        ffi.Pointer<ffi.Char> constraints);
typedef DailyRawWebRtcContextDelegate = ffi.Void;
typedef DartDailyRawWebRtcContextDelegate = void;

/// Platform-provided implementation of `MediaDevices.enumerateDevices()`.
///
/// Returns an owned JSON-encoded  list of media device infos.
///
/// Media device info:
/// ```json
/// {
/// deviceId: String,
/// groupId: String,
/// kind: "audioinput" | "audiooutput" | "videoinput",
/// label: String
/// }
/// ```
typedef DailyWebRtcContextDelegateGetEnumeratedDevicesFn = ffi.Pointer<
    ffi
    .NativeFunction<DailyWebRtcContextDelegateGetEnumeratedDevicesFnFunction>>;
typedef DailyWebRtcContextDelegateGetEnumeratedDevicesFnFunction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);
typedef DailyWebRtcContextDelegateCreateAudioDeviceModuleFn = ffi.Pointer<
    ffi.NativeFunction<
        DailyWebRtcContextDelegateCreateAudioDeviceModuleFnFunction>>;
typedef DailyWebRtcContextDelegateCreateAudioDeviceModuleFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate,
        ffi.Pointer<ffi.Void> task_queue_factory);
typedef DailyWebRtcContextDelegateCreateVideoDecoderFactoryFn = ffi.Pointer<
    ffi.NativeFunction<
        DailyWebRtcContextDelegateCreateVideoDecoderFactoryFnFunction>>;
typedef DailyWebRtcContextDelegateCreateVideoDecoderFactoryFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);
typedef DailyWebRtcContextDelegateCreateVideoEncoderFactoryFn = ffi.Pointer<
    ffi.NativeFunction<
        DailyWebRtcContextDelegateCreateVideoEncoderFactoryFnFunction>>;
typedef DailyWebRtcContextDelegateCreateVideoEncoderFactoryFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);
typedef DailyWebRtcContextDelegateCreateAudioDecoderFactoryFn = ffi.Pointer<
    ffi.NativeFunction<
        DailyWebRtcContextDelegateCreateAudioDecoderFactoryFnFunction>>;
typedef DailyWebRtcContextDelegateCreateAudioDecoderFactoryFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);
typedef DailyWebRtcContextDelegateCreateAudioEncoderFactoryFn = ffi.Pointer<
    ffi.NativeFunction<
        DailyWebRtcContextDelegateCreateAudioEncoderFactoryFnFunction>>;
typedef DailyWebRtcContextDelegateCreateAudioEncoderFactoryFnFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);

/// Platform-provided implementation of `getAudioDevice`.
typedef DailyWebRtcContextDelegateGetAudioDeviceFn = ffi.Pointer<
    ffi.NativeFunction<DailyWebRtcContextDelegateGetAudioDeviceFnFunction>>;
typedef DailyWebRtcContextDelegateGetAudioDeviceFnFunction
    = ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<DailyRawWebRtcContextDelegate> delegate);

/// Platform-provided implementation of `setAudioDevice`.
typedef DailyWebRtcContextDelegateSetAudioDeviceFn = ffi.Pointer<
    ffi.NativeFunction<DailyWebRtcContextDelegateSetAudioDeviceFnFunction>>;
typedef DailyWebRtcContextDelegateSetAudioDeviceFnFunction = ffi.Void Function(
    ffi.Pointer<DailyRawWebRtcContextDelegate> delegate,
    ffi.Pointer<ffi.Char> deviceId);
typedef DartDailyWebRtcContextDelegateSetAudioDeviceFnFunction = void Function(
    ffi.Pointer<DailyRawWebRtcContextDelegate> delegate,
    ffi.Pointer<ffi.Char> deviceId);

final class DailyWebRtcContextDelegate extends ffi.Struct {
  /// The functions' optional context (e.g. receiver).
  external DailyWebRtcContextDelegatePtr ptr;

  /// Functions for integrating with platform.
  external DailyWebRtcContextDelegateFns fns;
}

/// Pointer to `DailyWebRtcContextDelegate` receiver object.
typedef DailyWebRtcContextDelegatePtr
    = ffi.Pointer<DailyRawWebRtcContextDelegate>;

/// Information about the daily-x client library (e.g. daily-ios).
final class DailyAboutClient extends ffi.Struct {
  /// Library name, as a UTF-8 string
  external ffi.Pointer<ffi.Char> library1;

  /// Library version in the "<major>.<minor>.<patch>" format, as a UTF-8 string
  external ffi.Pointer<ffi.Char> version;

  /// Operating system, as a UTF-8 string
  external ffi.Pointer<ffi.Char> operating_system;

  /// Operating system version, as a UTF-8 string
  external ffi.Pointer<ffi.Char> operating_system_version;
}

final class DailyCallClientInterface extends ffi.Struct {
  /// The functions' optional context (e.g. receiver).
  external ffi.Pointer<DailyRawCallClient> ptr;

  /// Functions for integrating with platform.
  external DailyCallClientFns fns;
}

final class NativeCallClientDialoutFns extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id,
              ffi.Pointer<ffi.Char> properties)>> start_dialout;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DailyRawCallClient> client,
              ffi.Uint64 request_id)>> stop_dialout;
}

typedef DailyVirtualSpeakerDevice = ffi.Void;
typedef DartDailyVirtualSpeakerDevice = void;
typedef DailyVirtualMicrophoneDevice = ffi.Void;
typedef DartDailyVirtualMicrophoneDevice = void;
